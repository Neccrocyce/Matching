saved file format: csv
------------------
rooms:
name: String;capacity: int

persons:
name: String;;preference1: String;preference2: String\n


P:= Person; W := Präferenz der Person (W1: erste Präferenz, ...); Z:= Zimmer; U:= Anzahl P in Z - Kapazität von Z
Select Xn:=X: Wähle (ein) X das im folgenden als Xn definiert ist;  x From Y: ... ein x aus Y
random: zufällig eins (aber nie eins doppelt; sorted: der reihe nach wählen, erstes zuerst (default); 
max(X.y): gibt das Element X zurück mit den größten y (bei mehr als einem X: das erste)

/*
	Select Z1:=Z where max(Z.U)
	while (Z1.U > 0 || NOT all Z1.P selected) do
		Select random P1:=P From Z1
		if (P1.W2.U < 0) then
			P1.Z = P1.W2
		endif
	done
	
	Select Z1:=Z where max(Z.U)
	while (Z1.U > 0 || NOT all Z1.P selected) do
		Select random P1:=P From Z1
		if (P1.W2.U = 0) then
			Select Z12:=Z where max(Z.U) AND NOT Z == Z1
			while (Z12.U > -1 || NOT all Z12.P selected) do
				Select random P12:=P From Z12
				if (P12.W2.U < 0) then
				P12.Z = P12.W2
				endif
			done
			if (P1.W2.U < 0) then
				P1.Z = P1.W2
			endif
		endif
	done
	
	... usw while (exists(P) where P.W2.U = 0)
	
	*/
	
kurz alt:
----
	inner_loop: (int n, Z[])
	Select Z1:=Z where max(Z.U)
	while (Z1.U > -1 || NOT all Z1.P selected) do
		Select random P1:=P From Z1
		if (n > 0) then
			if (P1.W2.U = 0 && NOT P1.W2 = Z1 && NOT exists(P1.W2 in Z[]) then
				Goto inner_loop (n-1, Z[] + Z1)
				if (P1.W2.U < 0) then
					P1.Z = P1.W2
				endif
			endif
		else
			if (P1.W2.U < 0) then
			P1.Z = P1.W2
		endif
	done
	
	outer_loop: (int n)
	Select Z1:=Z where max(Z.U)
	while (Z1.U > 0 || NOT all Z1.P selected) do
		Select random P1:=P From Z1
	  	if (n > 0) then
			if (P1.W2.U = 0 && NOT P1.W2 = Z1) then
				Goto inner_loop (n-1, Z[] + Z1)
				if (P1.W2.U < 0) then
					P1.Z = P1.W2
				endif
			endif
		else
			if (P1.W2.U < 0) then
			P1.Z = P1.W2
		endif
	done
	
kurz neu:
---------
	inner_loop: (int[] n, Z[], Z1)
	while (Z1.U > -1 || NOT all Z1.P selected) do
		Select random P1:=P From Z1
		for (int i = n.lenth - 1 downto 2)
	  	do
			if (n[i] > 0) then
				n[i]--
				if (P1.Wi.U = 0 && NOT P1.Wi = Z1 && NOT exists(P1.Wi in Z[]) then
					Goto inner_loop (n, Z[] + Z1, Z1)
				endif
				if (P1.Wi.U < 0) then
					P1.Z = P1.Wi
				endif
				break
			endif
		done
	done
	
	//@param n number each priority is used
	outer_loop: 
	INPUT n: int[]
	OUTPUT goDeeper: boolean
	
	Select Z1:=Z where max(Z.U)
	while (Z1.U > 0 || NOT all Z1.P selected) do
		Select random P1:=P From Z1
		n2 = n.clone
	  	for (int i = n2.lenth - 1 downto 2)
	  	do
		  	if (n2[i] > 0) then
		  		n2[i]--
				if (P1.Wi.U = 0 && NOT P1.Wi = Z1) then		//falls P1 bereits in zweiter Präferenz
					goDeeper &= Goto inner_loop (n2, Z[] + Z1, Pi.Wi)
				endif
				if (P1.Wi.U < 0) then
					P1.Z = P1.Wi
					goDeeper &= false
				endif
				break
			endif
			goDeeper = true
		done
	done
	
	
	outer_outer_loop:
	int n[] = new int[#Z+1]
	
	while (goDeeper)
	n[2]++
	do
		while (NOT changed)
		do
			while (NOT all Z selected)
			do
				goDeeper = Goto outer_loop
			done
		done
	done
	
	
	
Durchlauf:
----------
	->2
	->2->2
	->2->2->2
	...
	
	->3
	->3->2
	->3->2->2
	...
	
	->3->3
	->3->3->2
	->3->3->2->2
	...
	
	...
	
	->4
	->4->2
	...
	
	->4->3
	->4->3->2
	...
	
	...
